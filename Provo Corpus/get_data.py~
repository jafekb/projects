import pandas as pd
import numpy as np
import sys
from matplotlib import pyplot as plt 
import cv2
from tqdm import tqdm
import os

def get_RMS_contrast(arr):
	#Source: https://en.wikipedia.org/wiki/Contrast_(vision)
	m,n = np.shape(arr)
	avg = arr.mean()
	rms = np.sqrt(np.sum((arr-avg)**2)/(m*n))
	return rms

def get_brightness(arr):
	"""
	Brightness calculated using a Luma channel
	https://en.wikipedia.org/wiki/Luma_(video)
	"""
	R,G,B = arr[:,:,0], arr[:,:,1], arr[:,:,2]
	Y = 0.299*R + 0.587*G + 0.144*B
	return Y.mean()

def circle(center_x, center_y, img):
	r = 75 #This relates pretty well to how much a human sees.
	count = 0
	l = img.shape
	m, n = l[0], l[1] #It also might have a depth dimension
	arr = np.zeros_like(img)

	for i in range(m): #I couldn't figure out how to mask this as a circle...
		for j in range(n):
			if (center_x - j)**2 + (center_y - i)**2 <= r**2:
				count +=1
				arr[i,j] = img[i,j]

	return arr, count

def main(df, all_pics, overwrite=True):
	for pic_name in all_pics:
		if overwrite:
			with open('CSV2/{}.csv'.format(pic_name.split('.')[0]), 'w') as f:
				f.write('Picture,X_center,Y_center,')
				f.write('Brightness,Contrast,FM,')
				f.write('VerticalContrast,VerticalFM,',)
				f.write('HorizontalContrast,HorizontalFM\n')

		print (pic_name)
		full_img = plt.imread('sceneimages/{}'.format(pic_name))
		m,n,k = full_img.shape
		if (m != 600) or (n != 800):
			print ('BAD BAD')
			continue #we'll worry about these strangely-shaped images in a little bit.
			#FYI: the program which does the eye-tracking automatically resizes the image to 800x600
		for a in tqdm(range(0,m,5)): #get every 5th value, because each pixel was just taking TOO long.
			for b in range(0,n,5):
				#Get the necessary images
				color_img, nonblack = circle(a, b, full_img) 
				if nonblack==0: nonblack = 1 #avoid zerodivision errors.
				img = color_img.mean(axis=2) #Convert to B&W 
				vert_img = cv2.Sobel(img, cv2.CV_64F, 1, 0, ksize=5)
				horiz_img = cv2.Sobel(img, cv2.CV_64F, 0, 1, ksize=5)

				#Get image info
				bright = get_brightness(color_img) / nonblack
				contr = get_RMS_contrast(img) / nonblack
				fm = cv2.Laplacian(img, cv2.CV_64F).var() / nonblack
				vert_contr = get_RMS_contrast(vert_img) / nonblack
				vert_fm = cv2.Laplacian(vert_img, cv2.CV_64F).var() / nonblack
				horiz_contr = get_RMS_contrast(horiz_img) / nonblack
				horiz_fm = cv2.Laplacian(horiz_img, cv2.CV_64F).var() / nonblack

				with open('CSV2/{}.csv'.format(pic_name.split('.')[0]), 'a') as writefile:
					writefile.write('{},{},{},'.format(pic_name, a, b))
					writefile.write('{},{},{},'.format(bright, contr, fm))
					writefile.write('{},{},'.format(vert_contr, vert_fm))
					writefile.write('{},{},\n'.format(horiz_contr, horiz_fm)) 
					#^can't really do horizontal or vertical brightness, because
					# it relies on the 3 channels, but edge detection with an RGB image is a nightmare.
					# maybe just use mean pixel value for those ones? idk

	return 0
			


if __name__ == '__main__':
	df = pd.read_csv('Scene Viewing Fix Report.txt', delimiter='\t')
	df_1 = df[['CURRENT_FIX_X', 'CURRENT_FIX_Y', 'CURRENT_FIX_DURATION', 'picture', 'CURRENT_FIX_INDEX']]
	
	#The remaining images are the ones that aren't 800x600, I'll figure out how to accommodate eye fixation locations.
	all_pics1 = ['marsh1.jpg', 'moun_tains.jpg', 'lockerroom4.jpg']
	
	all_pics2 = ['basketballcourt5.jpg', 'zoocage2.jpg', 'HELIPAD.jpg', 'computerlab4.jpg']
	p = all_pics1 + all_pics2
	
	p = main(df_1, p)
	# p = main(df_1, all_pics2)
	
		
		
	
